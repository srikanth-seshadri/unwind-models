{
  "meta": {
    "uea_system": {
      "red_config_sync_mcl": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show redundancy config sync failures mcl", 
        "keys": [
          "fail_cli"
        ], 
        "patterns": {
          "0": "^-%{GREEDYDATA:fail_cli}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "bootflash_size_check": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show bootflash: all", 
        "keys": [
          "bootflash_free", 
          "bootflash_used"
        ], 
        "cli_filters": "inc ^RP", 
        "patterns": {
          "0": "^%{NUMBER:bootflash_free}%{SPACE}bytes available%{SPACE}%{GREEDYDATA}%{NUMBER:bootflash_used}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "parse_pvp_log": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "Parsing PVP logs", 
        "keys": [
          "pvp_log_of_intr_timestamp", 
          "pvp_pid", 
          "pvp_log_of_intr"
        ], 
        "cli_filters": "inc ^RP", 
        "patterns": {
          "0": "%{TIME:pvp_log_of_intr_timestamp}%{GREEDYDATA}\\[%{NUMBER:pvp_pid}\\]%{GREEDYDATA:pvp_log_of_intr}unbound%{SPACE}variable"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "uea_mgr_fatal": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "Parsing UEA MGR log for FATAL msgs", 
        "keys": [
          "uea_mgr_fatal_log_timestmp", 
          "uea_mgr_fatal_pid", 
          "uea_mgr_fatal_log"
        ], 
        "patterns": {
          "0": "%{TIME:uea_mgr_fatal_log_timestmp}%{GREEDYDATA}\\[%{NUMBER:uea_mgr_fatal_pid}\\]: \\(FATAL\\):%{SPACE}%{GREEDYDATA:uea_mgr_fatal_log}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "show_version": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show version", 
        "keys": [
          "Image_version", 
          "Image_group", 
          "Image_type"
        ], 
        "cli_filters": "inc ^RP", 
        "patterns": {
          "1": "Experimental Version%{SPACE}%{NUMBER:Image_version}", 
          "0": "Cisco IOS Software %{DATA},%{SPACE}%{USERNAME:Image_group} Software%{GREEDYDATA}PPC_LINUX_IOSD%{GREEDYDATA}%{WORD:Image_type}%{GREEDYDATA}-M"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "uea_mgr_err": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "Parsing UEA MGR log for ERR msgs", 
        "keys": [
          "uea_mgr_err_log_timestmp", 
          "uea_mgr_err_pid", 
          "uea_mgr_err_log"
        ], 
        "cli_filters": "inc ^RP", 
        "patterns": {
          "0": "%{TIME:uea_mgr_err_log_timestmp}%{GREEDYDATA}\\[%{NUMBER:uea_mgr_err_pid}\\]: \\(ERR\\):%{SPACE}%{GREEDYDATA:uea_mgr_err_log}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "show_facility_alarm": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show facility-alarm status", 
        "keys": [
          "critical", 
          "%{SPACE", 
          "major", 
          "minor"
        ], 
        "cli_filters": "inc ^RP", 
        "patterns": {
          "0": "System Totals  Critical:%{SPACE}%{INT:critical}%{SPACE}Major:%{SPACE}%{INT:major}%{SPACE}Minor:%{SPACE}%{INT:minor}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "bheem_fpga_reg_read": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "test platform hardware pp {{rp_state}} function uea_test_bheem_read : {{reg_addr}}", 
        "keys": [
          "bheem_reg_addr", 
          "bheem_reg_val"
        ], 
        "cli_filters": "inc ^RP", 
        "patterns": {
          "0": "Output:: BHEEM address%{SPACE}%{BASE16NUM:bheem_reg_addr}%{SPACE}value%{SPACE}%{BASE16NUM:bheem_reg_val}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "process_memory_sorted": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show process memory sorted", 
        "keys": [
          "proc_mem_free", 
          "lsmpi_io_mem_free"
        ], 
        "patterns": {
          "1": "^%{SPACE}lsmpi_io%{SPACE}Pool%{GREEDYDATA}Free\\:%{SPACE}%{NUMBER:lsmpi_io_mem_free}", 
          "0": "^Processor%{SPACE}Pool%{GREEDYDATA}Free\\:%{SPACE}%{NUMBER:proc_mem_free}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "mem_debug_leaks": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show memory debug leaks", 
        "keys": [
          "add", 
          "size", 
          "alloc_pc"
        ], 
        "cli_filters": "inc ^RP", 
        "patterns": {
          "0": "^%{BASE16NUM:add}%{SPACE}%{INT:size}%{SPACE}%{BASE16NUM:alloc_pc}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "boot_package_logs": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "Boot image package mount", 
        "keys": [
          "mount"
        ], 
        "cli_filters": "inc ^RP", 
        "patterns": {
          "0": "^%IOSXEBOOT%{GREEDYDATA}\\):%{SPACE}%{GREEDYDATA:mount}is corrupt."
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "show_env": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show environment", 
        "keys": [
          "critical_alarm", 
          "major_alarm", 
          "minor_alarm"
        ], 
        "cli_filters": "inc ^RP", 
        "patterns": {
          "1": "Number of Major alarms:%{SPACE}%{INT:major_alarm}", 
          "0": "Number of Critical alarms:%{SPACE}%{INT:critical_alarm}", 
          "2": "Number of Minor alarms:%{SPACE}%{INT:minor_alarm}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "romvar_check": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show romvar", 
        "keys": [
          "aux_port"
        ], 
        "cli_filters": "inc ^RP", 
        "patterns": {
          "0": "^%{SPACE}AUX_PORT%{GREEDYDATA}%{NUMBER:aux_port}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "logging_rate_limit": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show running-config", 
        "keys": [
          "limit_string"
        ], 
        "patterns": {
          "0": "^logging%{SPACE}rate\\-%{ALPHA:limit_string}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "license_call_home": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "sh call-home profile", 
        "keys": [
          "prof_name", 
          "report_data", 
          "prof_status"
        ], 
        "patterns": {
          "1": "Reporting Data:%{SPACE}%{GREEDYDATA:report_data}", 
          "0": "Profile Name:%{SPACE}%{GREEDYDATA:prof_name}", 
          "2": "Profile status:%{SPACE}%{ALPHA:prof_status}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "IM_Version": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show diag all eeprom detail", 
        "keys": [
          "subslot", 
          "im_version"
        ], 
        "patterns": {
          "1": "^%{SPACE}Hardware%{SPACE}Revision%{SPACE}\\:%{SPACE}%{NUMBER:im_version}", 
          "0": "^SPA%{SPACE}EEPROM%{SPACE}data%{SPACE}for%{SPACE}subslot%{SPACE}%{GREEDYDATA:subslot}\\:"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "license_summary": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show license summary", 
        "keys": [
          "last_comm_attempt"
        ], 
        "patterns": {
          "1": "Last Communication Attempt: %{ALPHA:last_comm_attempt}", 
          "0": "Registration:"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "show_memory_stat": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show memory statistics", 
        "keys": [
          "processor_head", 
          "processor_total", 
          "processor_used", 
          "processor_free", 
          "processor_lowest", 
          "processor_largest", 
          "io_head", 
          "io_total", 
          "io_used", 
          "io_free", 
          "io_lowest", 
          "io_largest"
        ], 
        "cli_filters": "inc ^RP", 
        "patterns": {
          "1": "lsmpi_io%{SPACE}%{BASE16NUM:io_head}%{SPACE}%{INT:io_total}%{SPACE}%{INT:io_used}%{SPACE}%{INT:io_free}%{SPACE}%{INT:io_lowest}%{SPACE}%{INT:io_largest}", 
          "0": "Processor%{SPACE}%{BASE16NUM:processor_head}%{SPACE}%{INT:processor_total}%{SPACE}%{INT:processor_used}%{SPACE}%{INT:processor_free}%{SPACE}%{INT:processor_lowest}%{SPACE}%{INT:processor_largest}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "show_platform": {
        "markerindex": {
          "blockstart": 2
        }, 
        "cli": "show platform [ | inc {{inc_str}}]", 
        "keys": [
          "cpld_ver", 
          "fw_major_ver", 
          "fw_minor_ver", 
          "slot", 
          "pid", 
          "status", 
          "role", 
          "time_from_insert"
        ], 
        "cli_filters": "inc ^RP", 
        "patterns": {
          "1": "%{SLOT:slot}%{SPACE}%{USERNAME:pid}%{SPACE}%{WORD:status}%{SPACE}%{TIME:time_from_insert}", 
          "0": "%{USERNAME:slot}%{SPACE}(%{USERNAME:pid}%{SPACE}| )%{WORD:status}, %{WORD:role}%{SPACE}%{TIME:time_from_insert}", 
          "3": "%{SLOT:slot}%{SPACE}%{USERNAME:pid}%{SPACE}%{WORD:status}%{SPACE}%{WORD}%{SPACE}%{WORD}%{SPACE}%{TIME:time_from_insert}", 
          "2": "(%{USERNAME:TAG}|%{SLOT:TAG})%{SPACE}%{USERNAME}", 
          "5": "^%{USERNAME:slot}%{SPACE}%{USERNAME:pid}%{SPACE}%{WORD:status}%{SPACE}%{TIME:time_from_insert}", 
          "4": "^%{USERNAME:slot}%{SPACE}%{INT:cpld_ver}%{SPACE}%{INT:fw_major_ver}.%{INT:fw_minor_ver}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }
    }
  }, 
  "flows": {
    "check_if_bheem_init_started": {
      "models": [
        [
          "CONTAINS(Before the DATA_PROG_DONE)", 
          "REGEX(.*)", 
          "REGEX(.*)", 
          "done(Bheem FPGA INIT started)"
        ], 
        [
          "CONTAINS(NULL)", 
          "CONTAINS(NULL)", 
          "CONTAINS(NULL)", 
          "done(Bheem FPGA INIT not started)"
        ]
      ], 
      "config": [], 
      "options": [
        "Untagged Merge"
      ], 
      "schema": [
        "uea_system-uea_mgr_err_log", 
        "uea_system-uea_mgr_err_log_timestmp", 
        "uea_system-uea_mgr_err_pid", 
        "result"
      ]
    }, 
    "check_RP_pid_compatibility": {
      "models": [
        [
          "INST(__other__,{{uea_system-pid}})", 
          "done(RP- PID compatibility check done. They Match.)"
        ]
      ], 
      "config": [], 
      "schema": [
        "uea_system-pid", 
        "result"
      ]
    }, 
    "check_IM_compatibility_550T_bheem_fpga": {
      "models": [
        [
          "0", 
          "10030001", 
          "IN_LIST(\"0/5\",\"0/10\")", 
          "IN_LIST(\"A900-IMA8T1Z\",\"A900-IMA8S1Z\")", 
          "done(550T Bheem FPGA : IM compatibility check failed)"
        ], 
        [
          "0", 
          "10030001", 
          "IN_LIST(\"0/0\",\"0/1\",\"0/5\",\"0/10\")", 
          "IN_LIST(\"A900-IMA8T\",\"A900-IMA8S\")", 
          "done(550T Bheem FPGA : IM compatibility check failed)"
        ]
      ], 
      "config": [], 
      "schema": [
        "uea_system-bheem_reg_addr", 
        "uea_system-bheem_reg_val", 
        "uea_system-slot", 
        "uea_system-pid", 
        "result"
      ]
    }, 
    "check_pvp_log_for_unbound_var": {
      "models": [
        [
          "NULL", 
          "done(PVP logs checked. No Error found)"
        ]
      ], 
      "config": [], 
      "schema": [
        "uea_system-pvp_log_of_intr", 
        "result"
      ]
    }, 
    "verify_image_type_imslot_limitation": {
      "models": [
        [
          "UNIVERSALK9_NPE", 
          "NOT_CONTAINS(0/2)", 
          "REGEX(.*)", 
          "REGEX(.*)", 
          "done(pass. no incompatibility))"
        ], 
        [
          "UNIVERSALK9_NPE", 
          "CONTAINS(0/2)", 
          "REGEX(.*)", 
          "REGEX(.*)", 
          "done(pass. supported configuration)"
        ], 
        [
          "NOT(UNIVERSALK9_NPE)", 
          "NOT_CONTAINS(0/2)", 
          "REGEX(.*)", 
          "REGEX(.*)", 
          "done(pass. supported configuration)"
        ]
      ], 
      "config": [], 
      "options": [
        "Untagged Merge"
      ], 
      "schema": [
        "uea_system-Image_type", 
        "uea_system-slot", 
        "uea_system-Image_version", 
        "uea_system-Image_group", 
        "result"
      ]
    }, 
    "verify_uea_system_romvar_check": {
      "models": [
        [
          "INST(__other__,{{uea_system-aux_port}})", 
          "done(romon variables checked)"
        ]
      ], 
      "config": [], 
      "options": [
        "Untagged Merge"
      ], 
      "schema": [
        "uea_system-aux_port", 
        "result"
      ]
    }, 
    "verify_bheem_fpga_init_done": {
      "models": [
        [
          "CONTAINS(BHEEM Programming done)", 
          "REGEX(.*)", 
          "REGEX(.*)", 
          "done(Bheem FPGA INIT Completed)"
        ], 
        [
          "CONTAINS(NULL)", 
          "CONTAINS(NULL)", 
          "CONTAINS(NULL)", 
          "done(Bheem FPGA INIT not done)"
        ]
      ], 
      "config": [], 
      "options": [
        "Untagged Merge"
      ], 
      "schema": [
        "uea_system-uea_mgr_err_log", 
        "uea_system-uea_mgr_err_log_timestmp", 
        "uea_system-uea_mgr_err_pid", 
        "result"
      ]
    }, 
    "check_memory_leaks": {
      "models": [
        [
          "NULL", 
          "NULL", 
          "verified(no leaks)"
        ]
      ], 
      "config": [], 
      "schema": [
        "uea_system-add", 
        "uea_system-alloc_pc", 
        "result"
      ]
    }, 
    "verify_uea_system_logging_rate_limit_1": {
      "models": [
        [
          "CONTAINS(limit)", 
          "done(WARNING: logging is rate limited, some logs might be missed)"
        ], 
        [
          "CONTAINS(NULL)", 
          "done(success)"
        ]
      ], 
      "config": [], 
      "options": [
        "Untagged Merge"
      ], 
      "schema": [
        "uea_system-limit_string", 
        "result"
      ]
    }, 
    "verify_FP_status": {
      "models": [
        [
          "REGEX(F0|F1)", 
          "ok", 
          "REGEX(active|standby)", 
          "done(FP status checked)"
        ]
      ], 
      "config": [], 
      "schema": [
        "uea_system-slot", 
        "uea_system-status", 
        "uea_system-role", 
        "result"
      ]
    }, 
    "check_free_memory": {
      "models": [
        [
          "GREATER_THAN(EXPR(0.2 * {{uea_system-processor_total}}))", 
          "done(memory fine)"
        ]
      ], 
      "config": [], 
      "schema": [
        "uea_system-processor_free", 
        "result"
      ]
    }, 
    "verify_uea_system_IM_Version": {
      "models": [
        [
          "REGEX(.*)", 
          "LESS_THAN(1.0)", 
          "done(WARNING: Not a production IM, Use Production IM)"
        ]
      ], 
      "config": [], 
      "options": [
        "Untagged Merge"
      ], 
      "schema": [
        "uea_system-subslot", 
        "uea_system-im_version", 
        "result"
      ]
    }, 
    "verify_uea_system_process_memory_sorted": {
      "models": [
        [
          "LESS_THAN_EQUALS(200000000)", 
          "REGEX(.*)", 
          "done(WARNING: Low Processor Memory)"
        ], 
        [
          "GREATER_THAN(200000000)", 
          "REGEX(.*)", 
          "done(Processor memory is enough)"
        ], 
        [
          "REGEX(.*)", 
          "LESS_THAN_EQUALS(600)", 
          "done(WARNING: Low LSMPI IO Memory)"
        ], 
        [
          "REGEX(.*)", 
          "GREATER_THAN(600)", 
          "done(LSMPI IO Memory is enough)"
        ]
      ], 
      "config": [], 
      "options": [
        "Untagged Merge"
      ], 
      "schema": [
        "uea_system-proc_mem_free", 
        "uea_system-lsmpi_io_mem_free", 
        "result"
      ]
    }, 
    "verify_RP_status": {
      "models": [
        [
          "REGEX(R0|R1)", 
          "ok", 
          "REGEX(active|standby)", 
          "done(RP status checked)"
        ]
      ], 
      "config": [], 
      "schema": [
        "uea_system-slot", 
        "uea_system-status", 
        "uea_system-role", 
        "result"
      ]
    }, 
    "check_facility_alarms": {
      "models": [
        [
          "GREATER_THAN(0)", 
          "REGEX(.*)", 
          "REGEX(.*)", 
          "done(WARNING: Critical Facility Alarms Found)"
        ], 
        [
          "REGEX(.*)", 
          "GREATER_THAN(0)", 
          "REGEX(.*)", 
          "done(WARNING: Major Facility Alarms Found)"
        ], 
        [
          "REGEX(.*)", 
          "REGEX(.*)", 
          "GREATER_THAN(0)", 
          "done(WARNING: Minor Facility Alarms Found)"
        ], 
        [
          "0", 
          "0", 
          "0", 
          "done(No facility alarms.)"
        ], 
        [
          "GREATER_THAN(0)", 
          "GREATER_THAN(0)", 
          "GREATER_THAN(0)", 
          "done(WARNING: Critical, Major and Minor Facility Alarms Found)"
        ], 
        [
          "GREATER_THAN(0)", 
          "GREATER_THAN(0)", 
          "REGEX(.*)", 
          "done(WARNING: Critical and Major Facility Alarms Found)"
        ], 
        [
          "GREATER_THAN(0)", 
          "REGEX(.*)", 
          "GREATER_THAN(0)", 
          "done(WARNING: Critical and Minor Facility Alarms Found)"
        ], 
        [
          "REGEX(.*)", 
          "GREATER_THAN(0)", 
          "GREATER_THAN(0)", 
          "done(WARNING: Major and Minor Facility Alarms Found)"
        ]
      ], 
      "config": [], 
      "options": [
        "Untagged Merge"
      ], 
      "schema": [
        "uea_system-critical", 
        "uea_system-major", 
        "uea_system-minor", 
        "result"
      ]
    }, 
    "verify_uea_system_red_config_sync_mcl": {
      "models": [
        [
          "CONTAINS(line aux 0)", 
          "done(WARNING: Check AUX_PORT in roman variables)"
        ], 
        [
          "NOT_CONTAINS(line aux 0)", 
          "done(Success: AUX settings look fine)"
        ]
      ], 
      "config": [], 
      "options": [
        "Untagged Merge"
      ], 
      "schema": [
        "uea_system-fail_cli", 
        "result"
      ]
    }, 
    "check_env_alarms": {
      "models": [
        [
          "0", 
          "0", 
          "0", 
          "done(no env alarms.)"
        ]
      ], 
      "config": [], 
      "schema": [
        "uea_system-critical_alarm", 
        "uea_system-major_alarm", 
        "uea_system-minor_alarm", 
        "result"
      ]
    }, 
    "verify_uea_system_license_summary": {
      "models": [
        [
          "FAILED", 
          "Smart Call Home, Smart Licensing", 
          "ACTIVE", 
          "done(fail)"
        ], 
        [
          "REGEX(.*)", 
          "Smart Call Home, Smart Licensing", 
          "INACTIVE", 
          "done(fail)"
        ]
      ], 
      "config": [], 
      "options": [
        "Untagged Merge"
      ], 
      "schema": [
        "uea_system-last_comm_attempt", 
        "uea_system-report_data", 
        "uea_system-prof_status", 
        "result"
      ]
    }, 
    "verify_uea_system_license_call_home": {
      "models": [
        [
          "REGEX(.*)", 
          "Smart Call Home, Smart Licensing", 
          "ACTIVE", 
          "done(license profiles status checked)"
        ]
      ], 
      "config": [], 
      "options": [
        "Untagged Merge"
      ], 
      "schema": [
        "uea_system-prof_name", 
        "uea_system-report_data", 
        "uea_system-prof_status", 
        "result"
      ]
    }, 
    "verify_uea_system_boot_package_logs": {
      "models": [
        [
          "CONTAINS(Could not mount package)", 
          "done(WARNING: It might be faulty SD Card)"
        ], 
        [
          "NOT_CONTAINS(Could not mount package)", 
          "done(SD Card Sanity Passed)"
        ]
      ], 
      "config": [], 
      "options": [
        "Untagged Merge"
      ], 
      "schema": [
        "uea_system-mount", 
        "result"
      ]
    }, 
    "check_uea_mgr_for_fatal_log": {
      "models": [
        [
          "NOT_CONTAINS(BCM Failed attach)", 
          "done(UEA MGR logs checked. No interesting pattern.)"
        ]
      ], 
      "config": [], 
      "schema": [
        "uea_system-uea_mgr_fatal_log", 
        "result"
      ]
    }, 
    "verify_uea_system_bootflash_size_check": {
      "models": [
        [
          "GREATER_THAN(600000000)", 
          "REGEX(.*)", 
          "done(pass)"
        ], 
        [
          "LESS_THAN_EQUALS(600000000)", 
          "REGEX(.*)", 
          "done(WARNING: Free few things from boot flash)"
        ]
      ], 
      "config": [], 
      "options": [
        "Untagged Merge"
      ], 
      "schema": [
        "uea_system-bootflash_free", 
        "uea_system-bootflash_used", 
        "result"
      ]
    }
  }
}