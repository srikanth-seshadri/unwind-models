{
  "meta": {
    "test_comp": {
      "grok": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show grok", 
        "keys": [
          "node_id"
        ], 
        "patterns": {
          "0": "node:%{GREEDYDATA:node_id}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "all": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show all", 
        "keys": [
          "all_val"
        ], 
        "patterns": {
          "0": "Node:%{GREEDYDATA:all_val}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "poll": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show poll", 
        "keys": [
          "status"
        ], 
        "patterns": {
          "0": "status:%{GREEDYDATA:status}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "something": {
        "keys": [], 
        "markerindex": {
          "blockstart": 0
        }, 
        "multiline": "false", 
        "cli": "show something", 
        "remove_empty": "false"
      }, 
      "time": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show time", 
        "keys": [
          "start", 
          "end"
        ], 
        "patterns": {
          "1": "End:%{GREEDYDATA:end}", 
          "0": "Start:%{GREEDYDATA:start}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "misc1": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show misc_comparisons1", 
        "keys": [
          "misc1_c", 
          "misc1_d", 
          "misc1_b", 
          "misc1_a"
        ], 
        "patterns": {
          "1": "b:%{INT:misc1_b}", 
          "0": "a:%{NUMBER:misc1_a}", 
          "3": "d:%{INT:misc1_d}", 
          "2": "c:%{NUMBER:misc1_c}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "equal": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show equal", 
        "keys": [
          "a_hex", 
          "a_dec", 
          "a_expr", 
          "a_string"
        ], 
        "patterns": {
          "1": "a_dec:%{GREEDYDATA:a_dec}", 
          "0": "a_hex:%{GREEDYDATA:a_hex}", 
          "3": "a_string:%{GREEDYDATA:a_string}", 
          "2": "a_expr:%{GREEDYDATA:a_expr}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "range": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show range", 
        "keys": [
          "TAG", 
          "temp"
        ], 
        "patterns": {
          "1": "temperature:%{INT:temp}", 
          "0": "node:%{GREEDYDATA:TAG}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "multiline": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show multiline", 
        "keys": [
          "ml_node", 
          "one", 
          "two", 
          "one_ordered", 
          "two_ordered"
        ], 
        "patterns": {
          "1": "STRING:one:%{INT_LIST1:one}", 
          "0": "Node %{INT:ml_node}", 
          "3": "ORDERED_STRING:one:%{INT_LIST1:one_ordered}", 
          "2": "STRING:two:%{WORD_LIST_NL1:two}", 
          "4": "ORDERED_STRING:two:%{WORD_LIST_NL1:two_ordered}"
        }, 
        "multiline": "true", 
        "remove_empty": "false", 
        "type": "oper"
      }, 
      "coll2": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show coll2", 
        "keys": [
          "node", 
          "aa", 
          "bb"
        ], 
        "patterns": {
          "1": "aa:%{INT:aa}", 
          "0": "Node:%{GREEDYDATA:node}", 
          "2": "bb:%{INT:bb}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "coll1": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show coll1", 
        "keys": [
          "a", 
          "b", 
          "c"
        ], 
        "patterns": {
          "1": "b:%{INT:b}", 
          "0": "a:%{INT:a}", 
          "2": "c:%{INT:c}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "in": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show in", 
        "keys": [
          "node_id1", 
          "node_id_status"
        ], 
        "patterns": {
          "1": "ORDERED_LIST:%{NODEID_STR:node_id1} is %{GREEDYDATA:node_id_status}", 
          "0": "nodes:"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "ls": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "ls {{dest_dir}}/{{file}}", 
        "keys": [
          "error", 
          "listed_file"
        ], 
        "patterns": {
          "0": "^ls: %{GREEDYDATA:error}|^/%{GREEDYDATA:listed_file}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "link": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show regex", 
        "keys": [
          "TAG", 
          "coeff_a", 
          "coeff_b"
        ], 
        "patterns": {
          "1": "coeff_a:%{NUMBER:coeff_a}", 
          "0": "Link:%{INT:TAG}", 
          "2": "coeff_b:%{NUMBER:coeff_b}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "copy": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "cp  {{file}} {{dest_dir}}", 
        "keys": [
          "error"
        ], 
        "patterns": {
          "0": "^cp: %{GREEDYDATA:error}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }, 
      "any": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show any", 
        "keys": [
          "any_val"
        ], 
        "patterns": {
          "0": "Node:%{GREEDYDATA:any_val}"
        }, 
        "multiline": "false", 
        "remove_empty": "false", 
        "type": "oper"
      }, 
      "inc": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "show include_example [|inc {{inc_str}}]", 
        "keys": [
          "slot", 
          "full_slot"
        ], 
        "patterns": {
          "0": "(RP|LC)%{INT:slot} %{GREEDYDATA:full_slot}"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }
    }, 
    "diff_comp": {
      "diff": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "netstat -s", 
        "keys": [
          "output_echo_request", 
          "output_echo_replies", 
          "input_echo_requests", 
          "input_echo_replies"
        ], 
        "patterns": {
          "1": "ICMP output histogram:%{NL}echo request: %{INT:output_echo_request}", 
          "0": "Icmp:", 
          "3": "ICMP output histogram:%{NL}echo replies: %{INT:output_echo_replies}", 
          "2": "ICMP input histogram:%{NL}echo replies: %{INT:input_echo_replies}%{NL}ICMP output histogram:", 
          "4": "ICMP input histogram:%{NL}echo requests: %{INT:input_echo_requests}%{NL}ICMP output histogram:"
        }, 
        "multiline": "true", 
        "remove_empty": "false", 
        "type": "oper"
      }, 
      "ping": {
        "markerindex": {
          "blockstart": 0
        }, 
        "cli": "ping -c {{pkts}} -i 0.2 -W 1 {{dest_ip}}", 
        "keys": [
          "pkts_sent", 
          "pkts_rcvd", 
          "pkt_loss_percent", 
          "rtt_time"
        ], 
        "patterns": {
          "0": "%{INT:pkts_sent} packets transmitted, %{INT:pkts_rcvd} received, %{INT:pkt_loss_percent}% packet loss, time %{INT:rtt_time}ms"
        }, 
        "multiline": "false", 
        "remove_empty": "false"
      }
    }
  }, 
  "flows": {
    "interface_config": {
      "models": [
        [
          "done(interface configuration successful)"
        ]
      ], 
      "config": [
        "config-remove_comp-config-0"
      ], 
      "schema": [
        "result"
      ]
    }, 
    "verify_diff_comp_ping": {
      "models": [
        [
          "0", 
          "0", 
          "0", 
          "0", 
          "done(verify_diff_comp_0 successful)"
        ]
      ], 
      "config": [], 
      "schema": [
        "diff_comp-0-pkts_sent", 
        "diff_comp-0-pkts_rcvd", 
        "diff_comp-0-pkt_loss_percent", 
        "diff_comp-0-rtt_time", 
        "result"
      ]
    }, 
    "ping_traffic_test": {
      "models": [
        [
          "REGEX(.*done.*)", 
          "done(traffic test success)"
        ]
      ], 
      "config": [], 
      "schema": [
        "DIFF-{{diff_collect_flow}},{{diff_action_flow}},{{diff_verify_flow}}", 
        "result"
      ]
    }, 
    "verify_test_comp_coll1": {
      "models": [
        [
          "0", 
          "0", 
          "0", 
          "done(verify_test_comp_coll1 successful)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-coll1-a", 
        "test_comp-coll1-b", 
        "test_comp-coll1-c", 
        "result"
      ]
    }, 
    "verify_test_comp_coll2": {
      "models": [
        [
          "0", 
          "0", 
          "0", 
          "done(verify_test_comp_1 successful)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-coll2-node", 
        "test_comp-coll2-aa", 
        "test_comp-coll2-bb", 
        "result"
      ]
    }, 
    "verify_include": {
      "models": [
        [
          "RANGE(0:15)", 
          "done(Include test successful)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-inc-slot", 
        "result"
      ]
    }, 
    "verify_test_comp_inc": {
      "models": [
        [
          "RANGE(0:16)", 
          "REGEX(.*)", 
          "done(verify_test_comp_inc successful)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-inc-slot", 
        "test_comp-inc-full_slot", 
        "result"
      ]
    }, 
    "verify_test_comp_misc1": {
      "models": [
        [
          "LESS_THAN({{val1}}+.5)", 
          "LESS_THAN_EQUALS(5)", 
          "GREATER_THAN({{test_comp-misc1-misc1_a}}+{{test_comp-misc1-misc1_b}})", 
          "GREATER_THAN_EQUALS({{val1}}*2)", 
          "done(verify_test_comp_misc1 successful)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-misc1-misc1_a", 
        "test_comp-misc1-misc1_b", 
        "test_comp-misc1-misc1_c", 
        "test_comp-misc1-misc1_d", 
        "result"
      ]
    }, 
    "verify_test_comp_equal": {
      "models": [
        [
          "100", 
          "0x64", 
          "50+50", 
          "NOT_CONTAINS(down)", 
          "done(verify_test_comp_equal successful)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-equal-a_hex", 
        "test_comp-equal-a_dec", 
        "test_comp-equal-a_expr", 
        "test_comp-equal-a_string", 
        "result"
      ]
    }, 
    "ping_action": {
      "models": [
        [
          "{{pkts}}", 
          "done(ping done)"
        ]
      ], 
      "config": [], 
      "schema": [
        "diff_comp-ping-pkts_sent", 
        "result"
      ]
    }, 
    "verify_test_comp_ls": {
      "models": [
        [
          "NULL", 
          "CONTAINS({{file}})", 
          "done(verify_test_comp_ls successful)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-ls-error", 
        "test_comp-ls-listed_file", 
        "result"
      ]
    }, 
    "validate_multiline_comp": {
      "models": [
        [
          "1", 
          "a e c b d g f", 
          "1 2 3 4 5", 
          "a b c d e f g", 
          "1 3 2 5 4", 
          "done(node 1 Success)"
        ], 
        [
          "2", 
          "aa ee cc bb dd gg ff", 
          "10 20 30 40 50", 
          "aa bb cc dd ee ff gg", 
          "10 30 20 50 40", 
          "done(node 2 Success)"
        ], 
        [
          "3", 
          "aaa eee ccc bbb ddd ggg fff", 
          "100 200 300 400 500", 
          "aaa bbb ccc ddd eee fff ggg", 
          "200 100 500 300 400", 
          "done(node 3 Success)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-multiline-ml_node", 
        "test_comp-multiline-two", 
        "test_comp-multiline-one_ordered", 
        "test_comp-multiline-two_ordered", 
        "test_comp-multiline-one", 
        "result"
      ]
    }, 
    "verify_test_comp_range": {
      "models": [
        [
          "RANGE({{low}}:{{high}})", 
          "done(verify_test_comp_range successful)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-range-temp", 
        "result"
      ]
    }, 
    "verify_test_comp_link": {
      "models": [
        [
          "REGEX(0.5|1.01|{{coeff_high}})", 
          "NOT_REGEX(0.5|1.01|{{coeff_high}})", 
          "done(verify_test_comp_link successful)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-link-coeff_a", 
        "test_comp-link-coeff_b", 
        "result"
      ]
    }, 
    "verify_test_comp_copy": {
      "models": [
        [
          "NULL", 
          "done(verify_test_comp_copy successful)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-copy-error", 
        "result"
      ]
    }, 
    "verify_test_comp_poll": {
      "models": [
        [
          "POLL- val:{{state}} interval:1 num-retry:3", 
          "done(verify_test_comp_poll successful)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-poll-status", 
        "result"
      ]
    }, 
    "verify_test_comp_time": {
      "models": [
        [
          "TS_DIFF({{test_comp-time-end}}, %H:%M:%S.%f, GREATER_THAN(10))", 
          "REGEX(.*)", 
          "done(verify_test_comp_time successful)"
        ]
      ], 
      "config": [], 
      "options": [
        "Untagged Merge"
      ], 
      "schema": [
        "test_comp-time-start", 
        "test_comp-time-end", 
        "result"
      ]
    }, 
    "verify_other_node_state": {
      "models": [
        [
          "NODE({{other_node}},{{test_comp-ls-listed_file}})", 
          "done(verified other node state)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-ls-listed_file", 
        "result"
      ]
    }, 
    "verify_test_comp_grok": {
      "models": [
        [
          "GROK(NODEID_STR)", 
          "done(verify_test_comp_0 successful)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-grok-node_id", 
        "result"
      ]
    }, 
    "verify_timestamp_difference": {
      "models": [
        [
          "TS_DIFF({{test_comp-time-end}}, %H:%M:%S.%f, LESS_THAN({{link_sla}}))", 
          "done(Link came up within the SLA)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-time-start", 
        "result"
      ]
    }, 
    "verify_test_comp_in": {
      "models": [
        [
          "IN({{node_id_list}})", 
          "done(verify_test_comp_in successful)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-in-node_id1", 
        "result"
      ]
    }, 
    "verify_diff_comp_diff": {
      "models": [
        [
          "0", 
          "0", 
          "0", 
          "0", 
          "done(verify_diff_comp_diff successful)"
        ]
      ], 
      "config": [], 
      "schema": [
        "diff_comp-diff-output_echo_request", 
        "diff_comp-diff-output_echo_replies", 
        "diff_comp-diff-input_echo_requests", 
        "diff_comp-diff-input_echo_replies", 
        "result"
      ]
    }, 
    "verify_test_comp_any": {
      "models": [
        [
          "ANY(REGEX(down|errored))", 
          "done(All links aren't up)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-any-any_val", 
        "result"
      ]
    }, 
    "verify_untagged_merge": {
      "models": [
        [
          "10", 
          "RANGE(10:13)", 
          "done(success)"
        ]
      ], 
      "config": [], 
      "options": [
        "Untagged Merge"
      ], 
      "schema": [
        "test_comp-coll1-b", 
        "test_comp-coll2-bb", 
        "result"
      ]
    }, 
    "verify_remove_comp_config": {
      "models": [
        [
          "done(verify_remove_comp_config successful)"
        ]
      ], 
      "config": [], 
      "schema": [
        "result"
      ]
    }, 
    "ping_verify": {
      "models": [
        [
          "{{pkts}}", 
          "{{pkts}}", 
          "done(ping verification complete)"
        ]
      ], 
      "config": [], 
      "schema": [
        "diff_comp-diff-output_echo_request", 
        "diff_comp-diff-input_echo_replies", 
        "result"
      ]
    }, 
    "verify_test_comp_all": {
      "models": [
        [
          "ALL(GREATER_THAN({{contents}}))", 
          "done(verify_test_comp_all successful)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-all-all_val", 
        "result"
      ]
    }, 
    "verify_pred_len": {
      "models": [
        [
          "3", 
          "done(number of nodes verified)"
        ]
      ], 
      "config": [], 
      "schema": [
        "test_comp-all-all_val", 
        "result"
      ]
    }, 
    "ping_collect": {
      "models": [
        [
          "GREATER_THAN(0)", 
          "done(ping stats collected successfully)"
        ]
      ], 
      "config": [], 
      "schema": [
        "diff_comp-diff-output_echo_request", 
        "result"
      ]
    }
  }
}